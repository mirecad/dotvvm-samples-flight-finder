var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var FlightFinder;
(function (FlightFinder) {
    var Web;
    (function (Web) {
        var Api;
        (function (Api) {
            var ClientBase = /** @class */ (function () {
                function ClientBase() {
                }
                ClientBase.prototype.transformOptions = function (options) {
                    options.credentials = "same-origin";
                    return Promise.resolve(options);
                };
                return ClientBase;
            }());
            /* tslint:disable */
            //----------------------
            // <auto-generated>
            //     Generated using the NSwag toolchain v11.12.13.0 (NJsonSchema v9.10.14.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
            // </auto-generated>
            //----------------------
            // ReSharper disable InconsistentNaming
            var ApiClient = /** @class */ (function (_super) {
                __extends(ApiClient, _super);
                function ApiClient(baseUrl, http) {
                    var _this = _super.call(this) || this;
                    _this.jsonParseReviver = undefined;
                    _this.http = http ? http : window;
                    _this.baseUrl = baseUrl ? baseUrl : "";
                    return _this;
                }
                /**
                 * @return Success
                 */
                ApiClient.prototype.getAirports = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/Airports";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        method: "GET",
                        headers: new Headers({
                            "Content-Type": "application/json"
                        })
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http.fetch(url_, transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetAirports(_response);
                    });
                };
                ApiClient.prototype.processGetAirports = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach(function (v, k) { return _headers[k] = v; });
                    }
                    ;
                    if (status === 200) {
                        return response.text().then(function (_responseText) {
                            return;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then(function (_responseText) {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                };
                /**
                 * @return Success
                 */
                ApiClient.prototype.postFlightSearch = function () {
                    var _this = this;
                    var url_ = this.baseUrl + "/api/FlightSearch";
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        method: "POST",
                        headers: new Headers({
                            "Content-Type": "application/json"
                        })
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http.fetch(url_, transformedOptions_);
                    }).then(function (_response) {
                        return _this.processPostFlightSearch(_response);
                    });
                };
                ApiClient.prototype.processPostFlightSearch = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach(function (v, k) { return _headers[k] = v; });
                    }
                    ;
                    if (status === 200) {
                        return response.text().then(function (_responseText) {
                            return;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then(function (_responseText) {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                };
                return ApiClient;
            }(ClientBase));
            Api.ApiClient = ApiClient;
            var SwaggerException = /** @class */ (function (_super) {
                __extends(SwaggerException, _super);
                function SwaggerException(message, status, response, headers, result) {
                    var _this = _super.call(this) || this;
                    _this.isSwaggerException = true;
                    _this.message = message;
                    _this.status = status;
                    _this.response = response;
                    _this.headers = headers;
                    _this.result = result;
                    return _this;
                }
                SwaggerException.isSwaggerException = function (obj) {
                    return obj.isSwaggerException === true;
                };
                return SwaggerException;
            }(Error));
            Api.SwaggerException = SwaggerException;
            function throwException(message, status, response, headers, result) {
                if (result !== null && result !== undefined)
                    throw result;
                else
                    throw new SwaggerException(message, status, response, headers, null);
            }
        })(Api = Web.Api || (Web.Api = {}));
    })(Web = FlightFinder.Web || (FlightFinder.Web = {}));
})(FlightFinder || (FlightFinder = {}));
