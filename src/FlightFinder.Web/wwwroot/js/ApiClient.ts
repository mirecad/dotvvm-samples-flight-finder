namespace FlightFinder.Web.Api {
    class ClientBase {
        public transformOptions(options: RequestInit) {
            options.credentials = "same-origin";
            return Promise.resolve(options);
        }
    }
    /* tslint:disable */
    //----------------------
    // <auto-generated>
    //     Generated using the NSwag toolchain v11.12.13.0 (NJsonSchema v9.10.14.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
    // </auto-generated>
    //----------------------
    // ReSharper disable InconsistentNaming
    
    export class Client extends ClientBase {
        private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
        private baseUrl: string;
        protected jsonParseReviver: (key: string, value: any) => any = undefined;
    
        constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
            super();
            this.http = http ? http : <any>window;
            this.baseUrl = baseUrl ? baseUrl : "";
        }
    
        /**
         * @return Success
         */
        airports(): Promise<Airport[]> {
            let url_ = this.baseUrl + "/api/Airports";
            url_ = url_.replace(/[?&]$/, "");
    
            let options_ = <RequestInit>{
                method: "GET",
                headers: new Headers({
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processAirports(_response);
            });
        }
    
        protected processAirports(response: Response): Promise<Airport[]> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Airport.fromJS(item));
                }
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<Airport[]>(<any>null);
        }
    
        /**
         * @criteria (optional) 
         * @return Success
         */
        search(criteria?: SearchCriteria): Promise<Itinerary[]> {
            let url_ = this.baseUrl + "/api/FlightSearch";
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(criteria);
    
            let options_ = <RequestInit>{
                body: content_,
                method: "POST",
                headers: new Headers({
                    "Content-Type": "application/json", 
                    "Accept": "application/json"
                })
            };
    
            return this.transformOptions(options_).then(transformedOptions_ => {
                return this.http.fetch(url_, transformedOptions_);
            }).then((_response: Response) => {
                return this.processSearch(_response);
            });
        }
    
        protected processSearch(response: Response): Promise<Itinerary[]> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v, k) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Itinerary.fromJS(item));
                }
                return result200;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<Itinerary[]>(<any>null);
        }
    }
    
    export class Airport implements IAirport {
        Code?: string;
        DisplayName?: string;
    
        constructor(data?: IAirport) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.Code = data["code"] !== undefined ? data["code"] : <any>null;
                this.DisplayName = data["displayName"] !== undefined ? data["displayName"] : <any>null;
            }
        }
    
        static fromJS(data: any): Airport {
            let result = new Airport();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["code"] = this.Code !== undefined ? this.Code : <any>null;
            data["displayName"] = this.DisplayName !== undefined ? this.DisplayName : <any>null;
            return data; 
        }
    }
    
    export interface IAirport {
        Code?: string;
        DisplayName?: string;
    }
    
    export class SearchCriteria implements ISearchCriteria {
        FromAirport?: string;
        ToAirport?: string;
        OutboundDate?: Date;
        ReturnDate?: Date;
        TicketClass?: SearchCriteriaTicketClass;
    
        constructor(data?: ISearchCriteria) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.FromAirport = data["fromAirport"] !== undefined ? data["fromAirport"] : <any>null;
                this.ToAirport = data["toAirport"] !== undefined ? data["toAirport"] : <any>null;
                this.OutboundDate = data["outboundDate"] ? new Date(data["outboundDate"].toString()) : <any>null;
                this.ReturnDate = data["returnDate"] ? new Date(data["returnDate"].toString()) : <any>null;
                this.TicketClass = data["ticketClass"] !== undefined ? data["ticketClass"] : <any>null;
            }
        }
    
        static fromJS(data: any): SearchCriteria {
            let result = new SearchCriteria();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["fromAirport"] = this.FromAirport !== undefined ? this.FromAirport : <any>null;
            data["toAirport"] = this.ToAirport !== undefined ? this.ToAirport : <any>null;
            data["outboundDate"] = this.OutboundDate ? this.OutboundDate.toISOString() : <any>null;
            data["returnDate"] = this.ReturnDate ? this.ReturnDate.toISOString() : <any>null;
            data["ticketClass"] = this.TicketClass !== undefined ? this.TicketClass : <any>null;
            return data; 
        }
    }
    
    export interface ISearchCriteria {
        FromAirport?: string;
        ToAirport?: string;
        OutboundDate?: Date;
        ReturnDate?: Date;
        TicketClass?: SearchCriteriaTicketClass;
    }
    
    export class Itinerary implements IItinerary {
        Outbound?: FlightSegment;
        Return?: FlightSegment;
        Price?: number;
        TotalDurationHours?: number;
        AirlineName?: string;
    
        constructor(data?: IItinerary) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.Outbound = data["outbound"] ? FlightSegment.fromJS(data["outbound"]) : <any>null;
                this.Return = data["return"] ? FlightSegment.fromJS(data["return"]) : <any>null;
                this.Price = data["price"] !== undefined ? data["price"] : <any>null;
                this.TotalDurationHours = data["totalDurationHours"] !== undefined ? data["totalDurationHours"] : <any>null;
                this.AirlineName = data["airlineName"] !== undefined ? data["airlineName"] : <any>null;
            }
        }
    
        static fromJS(data: any): Itinerary {
            let result = new Itinerary();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["outbound"] = this.Outbound ? this.Outbound.toJSON() : <any>null;
            data["return"] = this.Return ? this.Return.toJSON() : <any>null;
            data["price"] = this.Price !== undefined ? this.Price : <any>null;
            data["totalDurationHours"] = this.TotalDurationHours !== undefined ? this.TotalDurationHours : <any>null;
            data["airlineName"] = this.AirlineName !== undefined ? this.AirlineName : <any>null;
            return data; 
        }
    }
    
    export interface IItinerary {
        Outbound?: FlightSegment;
        Return?: FlightSegment;
        Price?: number;
        TotalDurationHours?: number;
        AirlineName?: string;
    }
    
    export class FlightSegment implements IFlightSegment {
        Airline?: string;
        FromAirportCode?: string;
        ToAirportCode?: string;
        DepartureTime?: Date;
        ReturnTime?: Date;
        DurationHours?: number;
        TicketClass?: TicketClassData;
    
        constructor(data?: IFlightSegment) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.Airline = data["airline"] !== undefined ? data["airline"] : <any>null;
                this.FromAirportCode = data["fromAirportCode"] !== undefined ? data["fromAirportCode"] : <any>null;
                this.ToAirportCode = data["toAirportCode"] !== undefined ? data["toAirportCode"] : <any>null;
                this.DepartureTime = data["departureTime"] ? new Date(data["departureTime"].toString()) : <any>null;
                this.ReturnTime = data["returnTime"] ? new Date(data["returnTime"].toString()) : <any>null;
                this.DurationHours = data["durationHours"] !== undefined ? data["durationHours"] : <any>null;
                this.TicketClass = data["ticketClass"] ? TicketClassData.fromJS(data["ticketClass"]) : <any>null;
            }
        }
    
        static fromJS(data: any): FlightSegment {
            let result = new FlightSegment();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["airline"] = this.Airline !== undefined ? this.Airline : <any>null;
            data["fromAirportCode"] = this.FromAirportCode !== undefined ? this.FromAirportCode : <any>null;
            data["toAirportCode"] = this.ToAirportCode !== undefined ? this.ToAirportCode : <any>null;
            data["departureTime"] = this.DepartureTime ? this.DepartureTime.toISOString() : <any>null;
            data["returnTime"] = this.ReturnTime ? this.ReturnTime.toISOString() : <any>null;
            data["durationHours"] = this.DurationHours !== undefined ? this.DurationHours : <any>null;
            data["ticketClass"] = this.TicketClass ? this.TicketClass.toJSON() : <any>null;
            return data; 
        }
    }
    
    export interface IFlightSegment {
        Airline?: string;
        FromAirportCode?: string;
        ToAirportCode?: string;
        DepartureTime?: Date;
        ReturnTime?: Date;
        DurationHours?: number;
        TicketClass?: TicketClassData;
    }
    
    export class TicketClassData implements ITicketClassData {
        Name?: string;
        Value?: TicketClassDataValue;
    
        constructor(data?: ITicketClassData) {
            if (data) {
                for (var property in data) {
                    if (data.hasOwnProperty(property))
                        (<any>this)[property] = (<any>data)[property];
                }
            }
        }
    
        init(data?: any) {
            if (data) {
                this.Name = data["name"] !== undefined ? data["name"] : <any>null;
                this.Value = data["value"] !== undefined ? data["value"] : <any>null;
            }
        }
    
        static fromJS(data: any): TicketClassData {
            let result = new TicketClassData();
            result.init(data);
            return result;
        }
    
        toJSON(data?: any) {
            data = typeof data === 'object' ? data : {};
            data["name"] = this.Name !== undefined ? this.Name : <any>null;
            data["value"] = this.Value !== undefined ? this.Value : <any>null;
            return data; 
        }
    }
    
    export interface ITicketClassData {
        Name?: string;
        Value?: TicketClassDataValue;
    }
    
    export enum SearchCriteriaTicketClass {
        _0 = 0, 
        _1 = 1, 
        _2 = 2, 
        _3 = 3, 
    }
    
    export enum TicketClassDataValue {
        _0 = 0, 
        _1 = 1, 
        _2 = 2, 
        _3 = 3, 
    }
    
    export class SwaggerException extends Error {
        message: string;
        status: number; 
        response: string; 
        headers: { [key: string]: any; };
        result: any; 
    
        constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
            super();
    
            this.message = message;
            this.status = status;
            this.response = response;
            this.headers = headers;
            this.result = result;
        }
    
        protected isSwaggerException = true;
    
        static isSwaggerException(obj: any): obj is SwaggerException {
            return obj.isSwaggerException === true;
        }
    }
    
    function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, headers, null);
    }
}
